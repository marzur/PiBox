group 'pl.picode'

repositories {
}

dependencies {

}

ext.versionFile = file('version.properties') // properties contains version of application

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exists: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream {
        stream -> versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

// WRAPPER FOR GRADLE PROJECT
task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this.major = major
        this.minor = minor
        this.release = release
    }

    ProjectVersion(Integer major, Integer minor) {
        this(major, minor, false)
    }

    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

task first << { println "first" }
task second << { println "second" }

task printVersion {
    group = 'versioning'
    description = 'Prints project version.'
    dependsOn = [second, first]

    doFirst {
        println "Before reading the project version"
    }

    doLast {
        println("Version: $version")
    }
}

printVersion.doFirst { println "First action" }
printVersion << { logger.quiet("Last action") }

task third << { println "third" }
third.finalizedBy('printVersion')